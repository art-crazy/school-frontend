name: Mentor Hub Deployment

on:
  push:
    branches:
      - master
      - '**'  # Любые другие ветки

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install and Build
        run: |
          npm install
          npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: school-build
          path: dist/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: school-build
          path: dist/

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Determine deployment path
        id: vars
        run: |
          if [ "${{ github.ref_name }}" == "master" ]; then
            echo "DEPLOY_PATH=/var/www/mentor-hub.ru" >> $GITHUB_OUTPUT
            echo "DOMAIN=mentor-hub.ru" >> $GITHUB_OUTPUT
          else
            SANITIZED_BRANCH=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9-]/-/g')
            echo "DEPLOY_PATH=/var/www/$SANITIZED_BRANCH.mentor-hub.ru" >> $GITHUB_OUTPUT
            echo "DOMAIN=$SANITIZED_BRANCH.mentor-hub.ru" >> $GITHUB_OUTPUT
          fi

      - name: Create directory on server
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} \
            "sudo mkdir -p ${{ steps.vars.outputs.DEPLOY_PATH }} && \
             sudo chown -R $USER:$USER ${{ steps.vars.outputs.DEPLOY_PATH }}"

      - name: Deploy files
        run: |
          tar -czf deploy.tar.gz -C dist .
          scp -i ~/.ssh/id_rsa deploy.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/tmp/
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} \
            "tar -xzf /tmp/deploy.tar.gz -C ${{ steps.vars.outputs.DEPLOY_PATH }} && \
             rm /tmp/deploy.tar.gz"
          rm deploy.tar.gz

      - name: Configure Nginx and SSL
        run: |
          # Генерация Nginx конфига
          CONFIG="
          server {
              listen 80;
              server_name ${{ steps.vars.outputs.DOMAIN }};
              root ${{ steps.vars.outputs.DEPLOY_PATH }};
              index index.html;
          
              location / {
                  try_files \$uri \$uri/ /index.html;
              }
          }"
          
          echo "$CONFIG" > /tmp/nginx-config
          scp -i ~/.ssh/id_rsa /tmp/nginx-config ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/tmp/
          
          # Применение конфигурации
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} \
            "sudo mv /tmp/nginx-config /etc/nginx/sites-available/${{ steps.vars.outputs.DOMAIN }} && \
             sudo ln -sf /etc/nginx/sites-available/${{ steps.vars.outputs.DOMAIN }} /etc/nginx/sites-enabled/ && \
             sudo nginx -t && sudo systemctl reload nginx && \
             sudo certbot --nginx -d ${{ steps.vars.outputs.DOMAIN }} --non-interactive --agree-tos --email ${{ secrets.ADMIN_EMAIL }} --redirect || echo 'Certbot failed, continuing...'"
