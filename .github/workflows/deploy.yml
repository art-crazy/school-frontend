name: Mentor Hub Deployment

on:
  push:
    branches:
      - master
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install and Build
        run: |
          npm install
          npm run build -- --base=/
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: school-build
          path: dist/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: school-build
          path: dist/

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Determine deployment parameters
        id: vars
        run: |
          if [[ "$GITHUB_REF_NAME" == "master" ]]; then
            echo "DEPLOY_PATH=/var/www/mentor-hub" >> $GITHUB_OUTPUT
            echo "DEPLOY_DOMAIN=mentor-hub.ru" >> $GITHUB_OUTPUT
          else
            SANITIZED_BRANCH=$(echo "$GITHUB_REF_NAME" | tr -cd '[:alnum:]-._' | tr '[:upper:]' '[:lower:]')
            echo "DEPLOY_PATH=/var/www/$SANITIZED_BRANCH.mentor-hub" >> $GITHUB_OUTPUT
            echo "DEPLOY_DOMAIN=$SANITIZED_BRANCH.mentor-hub.ru" >> $GITHUB_OUTPUT
          fi

      - name: Prepare server directory
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} \
            "sudo mkdir -p ${{ steps.vars.outputs.DEPLOY_PATH }} && \
             sudo chown -R ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} ${{ steps.vars.outputs.DEPLOY_PATH }}"

      - name: Deploy files
        run: |
          tar -czf deploy.tar.gz -C dist .
          scp -i ~/.ssh/id_rsa deploy.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/tmp/
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} \
            "tar -xzf /tmp/deploy.tar.gz -C ${{ steps.vars.outputs.DEPLOY_PATH }} && \
             rm /tmp/deploy.tar.gz"
          rm deploy.tar.gz

      - name: Set correct permissions
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} \
            "sudo chown -R www-data:www-data ${{ steps.vars.outputs.DEPLOY_PATH }} && \
             sudo find ${{ steps.vars.outputs.DEPLOY_PATH }} -type d -exec chmod 755 {} \; && \
             sudo find ${{ steps.vars.outputs.DEPLOY_PATH }} -type f -exec chmod 644 {} \;"

      - name: Configure Nginx for master
        if: github.ref == 'refs/heads/master'
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOT'
          sudo tee /etc/nginx/sites-available/mentor-hub.conf > /dev/null << 'EOF'
          server {
              listen 80;
              server_name mentor-hub.ru www.mentor-hub.ru;
              return 301 https://$host$request_uri;
          }
          
          server {
              listen 443 ssl http2;
              server_name mentor-hub.ru www.mentor-hub.ru;
          
              # SSL сертификаты
              ssl_certificate /etc/letsencrypt/live/mentor-hub.ru/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/mentor-hub.ru/privkey.pem;
          
              # Подключаем рекомендованные настройки Let's Encrypt
              include /etc/letsencrypt/options-ssl-nginx.conf;
              ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
          
              # Фронтенд
              location / {
                  root /var/www/mentor-hub;
                  try_files $uri $uri/ /index.html;
          
                  # Более мягкие настройки кэширования
                  add_header Cache-Control "public, max-age=3600";
          
                  # Добавляем заголовки безопасности
                  add_header X-Frame-Options "SAMEORIGIN";
                  add_header X-Content-Type-Options "nosniff";
              }
          
              # API
              location /api/ {
                  proxy_pass http://localhost:3000/;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
          
                  # Таймауты можно уменьшить для стандартных API
                  proxy_connect_timeout 30s;
                  proxy_send_timeout 30s;
                  proxy_read_timeout 30s;
              }
          
              # Статика
              location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|webp)$ {
                  root /var/www/mentor-hub;
                  expires 1y;
                  access_log off;
                  add_header Cache-Control "public, max-age=31536000, immutable";
              }
          
              # Защита скрытых файлов
              location ~ /\.(?!well-known) {
                  deny all;
                  access_log off;
                  log_not_found off;
              }
          
              # Логи
              access_log /var/log/nginx/mentor-hub.access.log;
              error_log /var/log/nginx/mentor-hub.error.log;
          }
          EOF
          
          sudo ln -sf /etc/nginx/sites-available/mentor-hub.conf /etc/nginx/sites-enabled/
          sudo nginx -t && sudo systemctl restart nginx
          EOT

      - name: Configure Nginx and SSL for branches
        if: github.ref != 'refs/heads/master'
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOT'
          set -e

          # 1. Очистка старых конфигов
          sudo rm -f /etc/nginx/sites-available/${{ steps.vars.outputs.DEPLOY_DOMAIN }}.conf
          sudo rm -f /etc/nginx/sites-enabled/${{ steps.vars.outputs.DEPLOY_DOMAIN }}.conf

          # 2. Временный конфиг для получения сертификата
          sudo tee /etc/nginx/sites-available/${{ steps.vars.outputs.DEPLOY_DOMAIN }}.conf > /dev/null << 'EOF'
          server {
              listen 80;
              server_name ${{ steps.vars.outputs.DEPLOY_DOMAIN }};
          
              location /.well-known/acme-challenge/ {
                  root /var/www/certbot;
              }
          
              location / {
                  return 301 https://\$host\$request_uri;
              }
          }
          EOF
          
          sudo ln -sf /etc/nginx/sites-available/${{ steps.vars.outputs.DEPLOY_DOMAIN }}.conf /etc/nginx/sites-enabled/
          sudo systemctl restart nginx

          # 3. Получение сертификата
          sudo certbot certonly --nginx \
            -d ${{ steps.vars.outputs.DEPLOY_DOMAIN }} \
            --non-interactive \
            --agree-tos \
            --email ${{ secrets.ADMIN_EMAIL }} \
            --no-eff-email \
            --keep-until-expiring || echo "Certbot завершился с ошибкой, продолжаем..."

          # 4. Финальный конфиг
          sudo tee /etc/nginx/sites-available/${{ steps.vars.outputs.DEPLOY_DOMAIN }}.conf > /dev/null << 'EOF'
          server {
              listen 80;
              server_name ${{ steps.vars.outputs.DEPLOY_DOMAIN }};
              return 301 https://\$host\$request_uri;
          }

          server {
              listen 443 ssl http2;
              server_name ${{ steps.vars.outputs.DEPLOY_DOMAIN }};
          
              root ${{ steps.vars.outputs.DEPLOY_PATH }};
              index index.html;
          
              ssl_certificate /etc/letsencrypt/live/${{ steps.vars.outputs.DEPLOY_DOMAIN }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/${{ steps.vars.outputs.DEPLOY_DOMAIN }}/privkey.pem;
              include /etc/letsencrypt/options-ssl-nginx.conf;
              ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
          
              include /etc/nginx/mime.types;
              default_type application/octet-stream;

              location / {
                  try_files $uri /index.html =404;
              }

              location ~* \.(js|mjs)$ {
                  add_header Content-Type application/javascript;
              }

              location ~* \.css$ {
                  add_header Content-Type text/css;
              }

              location ~* \.(?:jpg|jpeg|png|gif|ico|svg|webp|woff2?|ttf|eot)$ {
                  expires 1y;
                  add_header Cache-Control "public, max-age=31536000, immutable";
                  access_log off;
              }

              location ~ /\. {
                  deny all;
                  access_log off;
                  log_not_found off;
              }

              error_page 404 /404.html;
              error_page 500 502 503 504 /50x.html;
          }
          EOF

          # 5. Проверка и перезагрузка
          sudo nginx -t && sudo systemctl restart nginx
          EOT

      - name: Verify deployment
        run: |
          echo "Testing deployment at ${{ steps.vars.outputs.DEPLOY_DOMAIN }}"
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} \
            "curl -vk https://${{ steps.vars.outputs.DEPLOY_DOMAIN }} || echo 'Verification failed'"
