name: Mentor Hub Deployment

on:
  push:
    branches:
      - master
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install and Build
        run: |
          npm install
          npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: school-build
          path: dist/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: school-build
          path: dist/

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Determine deployment parameters
        id: vars
        run: |
          if [[ "$GITHUB_REF_NAME" == "master" ]]; then
            echo "DEPLOY_PATH=/var/www/mentor-hub" >> $GITHUB_OUTPUT
            echo "DEPLOY_DOMAIN=mentor-hub.ru" >> $GITHUB_OUTPUT
          else
            SANITIZED_BRANCH=$(echo "$GITHUB_REF_NAME" | tr -cd '[:alnum:]-._' | tr '[:upper:]' '[:lower:]')
            echo "DEPLOY_PATH=/var/www/$SANITIZED_BRANCH.mentor-hub" >> $GITHUB_OUTPUT
            echo "DEPLOY_DOMAIN=$SANITIZED_BRANCH.mentor-hub.ru" >> $GITHUB_OUTPUT
          fi

      - name: Prepare server directory
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} \
            "sudo mkdir -p ${{ steps.vars.outputs.DEPLOY_PATH }} && \
             sudo chown -R ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} ${{ steps.vars.outputs.DEPLOY_PATH }}"

      - name: Deploy files
        run: |
          tar -czf deploy.tar.gz -C dist .
          scp -i ~/.ssh/id_rsa deploy.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/tmp/
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} \
            "tar -xzf /tmp/deploy.tar.gz -C ${{ steps.vars.outputs.DEPLOY_PATH }} && \
             rm /tmp/deploy.tar.gz"
          rm deploy.tar.gz

      - name: Set correct permissions
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} \
            "sudo chown -R www-data:www-data ${{ steps.vars.outputs.DEPLOY_PATH }} && \
             sudo find ${{ steps.vars.outputs.DEPLOY_PATH }} -type d -exec chmod 755 {} \; && \
             sudo find ${{ steps.vars.outputs.DEPLOY_PATH }} -type f -exec chmod 644 {} \;"

      - name: Configure Nginx for master
        if: github.ref == 'refs/heads/master'
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOT'
          sudo tee /etc/nginx/sites-available/mentor-hub.conf > /dev/null << 'EOF'
          server {
              listen 80;
              server_name mentor-hub.ru www.mentor-hub.ru;
              return 301 https://$host$request_uri;
          }
          
          server {
              listen 443 ssl;
              server_name mentor-hub.ru www.mentor-hub.ru;
          
              root /var/www/mentor-hub;
              index index.html;
          
              ssl_certificate /etc/letsencrypt/live/mentor-hub.ru/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/mentor-hub.ru/privkey.pem;
              include /etc/letsencrypt/options-ssl-nginx.conf;
              ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
          
              location / {
                  try_files $uri $uri/ /index.html;
              }
          }
          EOF
          
          sudo ln -sf /etc/nginx/sites-available/mentor-hub.conf /etc/nginx/sites-enabled/
          sudo nginx -t && sudo systemctl reload nginx
          EOT

      - name: Configure Nginx for branches
        if: github.ref != 'refs/heads/master'
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOT'
          # Создаём временный файл конфигурации
          CONF_FILE="/tmp/nginx_${GITHUB_REF_NAME}.conf"
          cat > $CONF_FILE << 'EOF'
          server {
              listen 80;
              server_name $DEPLOY_DOMAIN;
              return 301 https://$host$request_uri;
          }
          
          server {
              listen 443 ssl;
              server_name $DEPLOY_DOMAIN;
          
              root $DEPLOY_PATH;
              index index.html;
          
              ssl_certificate /etc/letsencrypt/live/mentor-hub.ru/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/mentor-hub.ru/privkey.pem;
              include /etc/letsencrypt/options-ssl-nginx.conf;
              ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
          
              location / {
                  try_files $uri $uri/ /index.html;
              }
          }
          EOF
          
          # Подставляем переменные
          sed -i "s|\$DEPLOY_DOMAIN|${{ steps.vars.outputs.DEPLOY_DOMAIN }}|g" $CONF_FILE
          sed -i "s|\$DEPLOY_PATH|${{ steps.vars.outputs.DEPLOY_PATH }}|g" $CONF_FILE
          
          # Копируем и активируем конфиг
          sudo mv $CONF_FILE /etc/nginx/sites-available/${{ steps.vars.outputs.DEPLOY_DOMAIN }}.conf
          sudo ln -sf /etc/nginx/sites-available/${{ steps.vars.outputs.DEPLOY_DOMAIN }}.conf /etc/nginx/sites-enabled/
          
          # Проверяем и перезагружаем Nginx
          sudo nginx -t && sudo systemctl reload nginx
          EOT

      - name: Verify deployment
        run: |
          echo "Testing deployment at ${{ steps.vars.outputs.DEPLOY_DOMAIN }}"
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} \
            "curl -I https://${{ steps.vars.outputs.DEPLOY_DOMAIN }} || echo 'Verification failed'"
