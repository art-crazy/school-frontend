import { useMemo, useState, useRef } from 'react';
import styles from './UseMemoPage.module.scss';
import ExampleCode from "@/shared/components/ExampleCode/ExampleCode.tsx";
import { USEMEMO_EXAMPLE } from "@/pages/UseMemo/UseMemoPage.example.ts";

const products = [
    { id: 1, name: 'MacBook Pro' },
    { id: 2, name: 'iPhone 15' },
    { id: 3, name: 'iPad Air' },
    { id: 4, name: 'Apple Watch' },
    { id: 5, name: 'AirPods Pro' },
];

export default function UseMemoPage() {
    console.log('–†–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
    const [queryMemo, setQueryMemo] = useState('');
    const [queryNoMemo, setQueryNoMemo] = useState('');
    const [renderCountMemo, setRenderCountMemo] = useState(0);
    const [renderCountNoMemo, setRenderCountNoMemo] = useState(0);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –≤—ã–∑—ã–≤–∞—Ç—å —Ä–µ—Ä–µ–Ω–¥–µ—Ä
    const filterCounters = useRef({
        memo: 0,
        noMemo: 0
    });

    // ‚úÖ –° useMemo ‚Äî —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ queryMemo
    const filteredWithMemo = useMemo(() => {
        console.log('*** [useMemo] –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤... ***');
        filterCounters.current.memo += 1;
        return products.filter(product =>
            product.name.toLowerCase().includes(queryMemo.toLowerCase())
        );
    }, [queryMemo]);

    // ‚ùå –ë–µ–∑ useMemo ‚Äî —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞–∂–¥—ã–π —Ä–µ—Ä–µ–Ω–¥–µ—Ä
    const filteredWithoutMemo = products.filter(product => {
        console.log('*** [no useMemo] –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤... ***');
        filterCounters.current.noMemo += 1;
        return product.name.toLowerCase().includes(queryNoMemo.toLowerCase());
    });

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—á–µ—Ç—á–∏–∫–æ–≤
    const triggerRerenderMemo = () => {
        setRenderCountMemo(c => c + 1);
    };

    const triggerRerenderNoMemo = () => {
        setRenderCountNoMemo(c => c + 1);
    };

    return (
        <div className={styles.container}>
            <div className={styles.instructions}>
                <h2 className={styles.instructionsTitle}>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ useMemo</h2>
                <div className={styles.instructionsContent}>
                    <p>–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º <code>useMemo</code> –∏ –æ–±—ã—á–Ω—ã–º–∏
                        –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ.</p>

                    <h3>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</h3>
                    <ol>
                        <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –≤ –æ–±–µ–∏—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö</li>
                        <li>–ù–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Ä–µ–Ω–¥–µ—Ä"</li>
                        <li>–°–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å—á–µ—Ç—á–∏–∫–µ –ª–∏–±–æ –≤ –∫–æ–Ω—Å–æ–ª–∏</li>
                    </ol>

                    <h3>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
                    </h3>
                    <a target="_blank"
                       rel="noopener noreferrer"
                       className={styles.a}
                       href={'https://ru.react.dev/reference/react/useMemo'}>
                        https://ru.react.dev/reference/react/useMemo
                    </a>
                </div>
            </div>

            <h2 className={styles.title}>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ useMemo vs –ë–µ–∑ useMemo</h2>
            <div className={styles.grid}>
                <div className={styles.column}>
                    <h3 className={styles.h3}>–° useMemo</h3>
                    <input
                        type="text"
                        className={styles.input}
                        placeholder="–ü–æ–∏—Å–∫..."
                        value={queryMemo}
                        onChange={(e) => setQueryMemo(e.target.value)}
                    />
                    <button
                        className={styles.button}
                        onClick={triggerRerenderMemo}
                    >
                        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Ä–µ–Ω–¥–µ—Ä
                    </button>
                    <ul className={styles.list}>
                        {filteredWithMemo.map(product => (
                            <li key={product.id} className={styles.item}>{product.name}</li>
                        ))}
                    </ul>
                    <p className={styles.description}>
                        üîÅ –†–µ–Ω–¥–µ—Ä–æ–≤: {renderCountMemo} <br/>
                        üîÑ –§–∏–ª—å—Ç—Ä–∞—Ü–∏–π: {filterCounters.current.memo} <br/>
                        üîí –†–µ–∑—É–ª—å—Ç–∞—Ç –∫—ç—à–∏—Ä—É–µ—Ç—Å—è
                    </p>
                </div>

                <div className={styles.column}>
                    <h3 className={styles.h3}>–ë–µ–∑ useMemo</h3>
                    <input
                        type="text"
                        className={styles.input}
                        placeholder="–ü–æ–∏—Å–∫..."
                        value={queryNoMemo}
                        onChange={(e) => setQueryNoMemo(e.target.value)}
                    />
                    <button
                        className={styles.button}
                        onClick={triggerRerenderNoMemo}
                    >
                        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Ä–µ–Ω–¥–µ—Ä
                    </button>
                    <ul className={styles.list}>
                        {filteredWithoutMemo.map(product => (
                            <li key={product.id} className={styles.item}>{product.name}</li>
                        ))}
                    </ul>
                    <p className={styles.description}>
                        üîÅ –†–µ–Ω–¥–µ—Ä–æ–≤: {renderCountNoMemo} <br/>
                        üîÑ –§–∏–ª—å—Ç—Ä–∞—Ü–∏–π: {filterCounters.current.noMemo} <br/>
                        ‚ùó –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
                    </p>
                </div>
            </div>

            <ExampleCode code={USEMEMO_EXAMPLE}/>
        </div>
    );
};
